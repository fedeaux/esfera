// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.ScreenFitter = (function() {

    function ScreenFitter(target_selector, _args) {
      var defs, key, val;
      this.target_selector = target_selector;
      if (_args == null) {
        _args = {};
      }
      this.apply_strategy = __bind(this.apply_strategy, this);

      this.lazy_apply_strategy = __bind(this.lazy_apply_strategy, this);

      this.target = $(this.target_selector);
      defs = {
        strategy: 'fit_paper',
        container: this.target.parent(),
        lazy_apply_strategy_delay: 250,
        onResize: null,
        max_width: 960
      };
      this.args = {};
      for (key in defs) {
        val = defs[key];
        if (_args[key] != null) {
          this.args[key] = _args[key];
        } else {
          this.args[key] = val;
        }
      }
      this.width = this.target.width();
      this.height = this.target.height();
      this.container = this.args.container;
      this.container.resize(this.lazy_apply_strategy);
      this.apply_strategy();
    }

    ScreenFitter.prototype.lazy_apply_strategy = function() {
      if (this.lazy_apply_strategy_timeout) {
        clearTimeout(this.lazy_apply_strategy_timeout);
      }
      return this.lazy_apply_strategy_timeout = setTimeout(this.apply_strategy, this.args.lazy_apply_strategy_delay);
    };

    ScreenFitter.prototype.set_containers_values = function() {
      this.container_width = this.container.width();
      return this.container_height = this.container.height();
    };

    ScreenFitter.prototype.apply_strategy = function() {
      this.set_containers_values();
      if (this.args.strategy === 'fit_paper') {
        return this.fit_paper();
      }
    };

    ScreenFitter.prototype.is_portrait = function() {
      return this.container_height > this.container_width;
    };

    ScreenFitter.prototype.set_target_dimensions = function(width, height) {
      var margin_left;
      if (width < this.container_width) {
        margin_left = (this.container_width - width) / 2;
      } else {
        margin_left = 0;
      }
      this.target.width(width);
      this.target.height(height);
      this.target.offset({
        left: margin_left
      });
      if (this.args.onResize != null) {
        return this.args.onResize(this.target);
      }
    };

    ScreenFitter.prototype.fit_paper = function() {
      var dim;
      dim = Math.min(this.container_width, this.args.max_width);
      return this.set_target_dimensions(dim, dim * 4 / 3);
    };

    return ScreenFitter;

  })();

}).call(this);
